/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DK_AA LBKT
#define DK_AE SEMI
#define DK_OE SQT

// Shifted characters
#define DK_SEMI LS(COMMA) // ;
#define DK_COLON LS(DOT) // :
#define DK_PLUS MINUS // +
#define DK_MINUS FSLH // -
#define DK_EQ LS(N0) // = 
#define DK_QUES UNDER // _ 
#define DK_LESS BSLH // <
#define DK_MORE LS(BLSH) // >
#define DK_PIPE RA(I) // |
#define DK_QUOTE AT // "
#define DK_AT RA(BSLH) // @
#define DK_BSLH RA(RS(N7)) // \
#define DK_SLH AMPS // /
#define DK_AMPS CARET // &
#define DK_DLLR GRAVE // $
//#define DK_BTICK // `

// Alt-Gr keys
#define DK_TICK BSLH // '
#define DK_LPRN LS(N8)	// (
#define DK_RPRN LS(N9)	// )
#define DK_LCBR RA(RS(N8))  // {
#define DK_RCBR RA(RS(N9))	// }
#define DK_LBRC RA(N8)	// [
#define DK_RBRC RA(N9)	// ]


#define COMBO(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <50>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <0>; \
  };

/ {

        combos {
            compatible = "zmk,combos";
            COMBO(AA, &kp DK_AA, 13 22) // z & ø giver å 
            COMBO(LOCK, &kp C_PWR, 1 10)
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
// |             |      Q      |      W      |      E      |      R      |      T      |   |      Y      |      U      |      I      |      O      |      P      |            |
        &trans        &kp Q         &kp W         &kp E         &kp R         &kp T             &kp Y         &kp U         &kp I         &kp O         &kp P        &trans
// |             |      A      |      S      |      D      |      F      |      G      |   |      H      |      J      |      K      |      L      |      Æ      |            |
        &trans       &kp A          &kp S         &kp D         &kp F         &kp G             &kp H         &kp J         &kp K         &kp L       &kp DK_AE      &trans
// |             |      Z      |      X      |      C      |      V      |      B      |   |      N      |      M      |      ,      |      .      |      Ø      |            |
        &trans       &kp Z          &kp X         &kp C         &kp V         &kp B             &kp N         &kp M       &kp COMMA      &kp DOT      &kp DK_OE      &trans
//                                           |    SHIFT    |  LWR / TAB  |  CTRL / SPC |   |   CMD/ENT   |  RSE / BSPC |     ALT     |
                                              &mt LSHFT ESC &lt 1 TAB   &mt LCTRL SPACE    &mt RGUI RET  &lt 2 BSPC    &kp RALT
                        >;
                };
                lower_layer {
                        bindings = <
// |             |     1      |      2      |      3      |      4      |      5      |   |      6      |      7      |      8      |      9      |      0      |             |   
       &trans        &kp N1        &kp N2        &kp N3        &kp N4        &kp N5            &kp N6        &kp N7        &kp N8        &kp N9       &kp N0         &trans
// |             |   VOL DWN  |   VOL UP    |      PP     |     PREV    |     NEXT    |   |             |     LFT     |      DWM    |     UP      |     RGT     |             |
       &trans     &kp C_VOL_DN  &kp C_VOL_UP    &kp C_PP    &kp C_PREV    &kp C_NEXT           &trans       &kp LEFT      &kp DOWN       &kp UP      &kp RIGHT        &trans
// |             |    BT 1    |     BT 2    |     BT 3    |             |             |   |             |             |             |             |      Å       |             | 
       &trans     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &trans         &trans           &trans        &trans        &trans        &trans      &kp DK_AA       &trans
//                                          |             |             |             |   |             |             |             |           
                                                &trans         &trans        &trans          &trans        &trans       &trans
                        >;
                };

                raise_layer {
                        bindings = <
// |             |      !      |      "      |      #      |      $      |      %      |   |      &      |      /      |      {      |      }      |      *      |            | 
//        &trans       &kp EXCL     &kp DK_QUOTE   &kp HASH      &kp DK_DLLR   &kp PRCNT      &kp DK_AMPS     &kp DK_SLH    &kp DK_LCBR  &kp DK_RCBR   &kp KP_MULTIPLY    &trans
        &trans       &kp EXCL     &trans   &kp HASH      &trans   &kp PRCNT      &kp DK_AMPS     &kp DK_SLH    &kp DK_LCBR  &kp DK_RCBR   &kp KP_MULTIPLY    &trans
// |             |             |             |             |             |             |   |      *      |      +      |       (     |      )      |      \      |            |
       &trans        &trans     &kp DK_LBRC   &kp  DK_RBRC   &kp DK_EQ       &trans         &kp KP_MULTIPLY &kp DK_PLUS  &kp DK_LPRN  &kp DK_RPRN     &kp BSLH        &trans
// |             |             |             |             |             |             |   |      _      |      -      |    SEMI     |    COLON    |      ?      |            |
       &trans         &trans     &kp DK_LESS   &kp DK_MORE   &kp DK_PIPE     &trans          &kp UNDER     &kp DK_MINUS   &kp DK_SEMI  &kp DK_COLON  &kp DK_QUES      &trans
//                                           |     CMD     |             |     SPC     |   |     ENT     |             |     ALT     |
                                                &trans         &trans        &trans            &trans        &trans        &trans 
                        >;
                };
        };
};
